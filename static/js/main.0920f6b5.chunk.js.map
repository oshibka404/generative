{"version":3,"sources":["Progression/Progression.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["nextGeneration","ruleNumber","prevState","map","value","index","array","leftIndex","length","rightIndex","leftCell","rightCell","cellsAbove","ruleString","padWithZeroes","parseInt","applyRule","join","toString","Array","fill","Cell","x","y","alive","toggleAlive","isTogglable","className","onClick","defaultInitialState","defaultRuleNumber","Progression","tick","useState","initialState","setInitialState","setRuleNumber","toggleCell","newState","cell","grid","state","steps","fullGrid","i","push","calculateFullGrid","onChange","changeEvent","target","note","gridRow","Math","floor","cellValue","App","clockIntervalID","useRef","setTick","currentTick","isPlaying","setIsPlaying","tempo","setTempo","useEffect","window","clearInterval","current","sixteenthTime","setInterval","e","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0920f6b5.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './Progression.css';\n\ninterface ProgressionProps {\n  tick: number;\n}\n\nfunction Progression({\n  tick\n}: ProgressionProps) {\n\n  const [initialState, setInitialState] = useState(defaultInitialState);\n\n  const [ruleNumber, setRuleNumber] = useState(defaultRuleNumber);\n\n  function toggleCell(y : number) {\n    const newState = initialState.map((cell : number) => cell);\n    newState[y] = 1 - initialState[y];\n    setInitialState(newState);\n  }\n\n  const grid = calculateFullGrid(ruleNumber, initialState);\n  \n  return (\n    <div className=\"progression\">\n      <div className=\"progression__controls\">\n        <div className=\"progression__rulenumber\">\n          <label>\n            <div className=\"label-text\"> {/* TODO: handle invalid values */}\n              Rule:\n            </div>\n            <input value={ruleNumber} onChange={(changeEvent) => setRuleNumber(parseInt(changeEvent.target.value))} />\n          </label>\n        </div>\n        <div className=\"progression__rulenumber\">\n          <label>\n            <div className=\"label-text\">\n              <input value={padWithZeroes(ruleNumber)} onChange={(changeEvent) => setRuleNumber(parseInt(changeEvent.target.value))} />\n            </div>\n          </label>\n        </div>\n      </div>\n      <div className=\"grid\">\n        <div className=\"grid__header\">\n        {\n          ['C', 'D', 'E', 'F', 'G', 'A', 'B'].map((note) => (\n            <div className=\"grid__header-cell\" key={note}>\n              {note}\n            </div>\n          ))\n        }\n        </div>\n        {\n          grid.map((gridRow: number[], x: number) => (\n            <div className={`grid__row ${x === Math.floor(tick / 2) ? 'grid__row--current' : ''}`} key={x}>\n              {gridRow.map((cellValue: number, y: number) => (\n                <Cell \n                  key={y}\n                  x={x}\n                  y={y}\n                  alive={cellValue} \n                  toggleAlive={toggleCell}\n                />\n              ))}\n            </div>\n          ))\n        }\n      </div>\n    </div>\n  )\n}\n\nfunction calculateFullGrid(ruleNumber: number, state: number[]) : number[][] {\n  const steps = 8;\n  const fullGrid : number[][] = [];\n  for (let i = 0; i < steps; i++) {\n    if (i === 0) {\n      fullGrid.push(state);\n    } else {\n      fullGrid.push(nextGeneration(ruleNumber, fullGrid[fullGrid.length - 1]));\n    }\n  }\n  return fullGrid;\n}\n\nfunction nextGeneration(ruleNumber: number, prevState : number[]) : number[] {\n  const nextGen = prevState.map((value, index, array) => {\n    const leftIndex = index === 0 ? array.length - 1 : index - 1;\n    const rightIndex = index === array.length - 1 ? 0 : index + 1;\n    const leftCell = array[leftIndex];\n    const rightCell = array[rightIndex];\n    return applyRule(ruleNumber, [leftCell, value, rightCell].join(''));\n  });\n\n  return nextGen;\n}\n\nfunction padWithZeroes(ruleNumber: number) {\n  let ruleString = ruleNumber.toString(2);\n\n  const zeroPrefix = Array(8 - ruleString.length).fill(0).join('');\n  ruleString = zeroPrefix + ruleString;\n\n  return ruleString;\n}\n\nfunction applyRule(ruleNumber : number, cellsAbove : string) {\n  let ruleString = padWithZeroes(ruleNumber);\n\n  const rule : { [key: string] : number } = {\n    '111': parseInt(ruleString[0], 10) || 0,\n    '110': parseInt(ruleString[1], 10) || 0,\n    '101': parseInt(ruleString[2], 10) || 0,\n    '100': parseInt(ruleString[3], 10) || 0,\n    '011': parseInt(ruleString[4], 10) || 0,\n    '010': parseInt(ruleString[5], 10) || 0,\n    '001': parseInt(ruleString[6], 10) || 0,\n    '000': parseInt(ruleString[7], 10) || 0,\n  }\n  return rule[cellsAbove];\n}\n\nfunction Cell({x, y, alive, toggleAlive}: CellProps) {\n  const isTogglable = x === 0;\n  \n  return <div\n    className={`grid__cell\n      ${alive ? 'grid__cell--alive' : ''}\n      ${isTogglable ? 'grid__cell--togglable' : ''}\n    `}\n    onClick={\n      (() => {\n        if (isTogglable) {\n          toggleAlive(y);\n        }\n      })\n    }\n  />\n}\n\ninterface CellProps {\n  x: number;\n  y: number;\n  alive: number;\n  toggleAlive: (x: number) => void;\n}\n  \nconst defaultInitialState = [1,0,1,0,1,0,1];\n\nconst defaultRuleNumber = 30;\n\nexport default Progression;\n","import './App.css';\nimport React, { useRef, useState, useEffect } from 'react';\nimport Progression from './Progression/Progression';\n\nfunction App() {\n  const clockIntervalID = useRef<number>(0);\n  \n  const [tick, setTick] = useState(-1);\n  const currentTick = useRef<number>(tick);\n\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [tempo, setTempo] = useState(100);\n\n  useEffect(() => {\n    window.clearInterval(clockIntervalID.current);\n  }, [tempo]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      const sixteenthTime = 60000 / tempo / 4;\n      if (clockIntervalID.current === 0) {\n        clockIntervalID.current = window.setInterval(() => {\n          currentTick.current = (currentTick.current + 1) % 16;\n          setTick((currentTick.current));\n        }, sixteenthTime);\n      }\n    } else {\n      window.clearInterval(clockIntervalID.current);\n      clockIntervalID.current = 0;\n      currentTick.current = -1;\n      setTick(-1);\n    }\n  }, [isPlaying, tempo, tick]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App_controls\">\n        <input value={tempo} onChange={(e) => setTempo(parseInt(e.target.value))} />\n        <button onClick={() => {\n          setIsPlaying(!isPlaying);\n        }}>{isPlaying ? 'pause' : 'play'}</button>\n      </div>\n\n      <Progression tick={currentTick.current} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}